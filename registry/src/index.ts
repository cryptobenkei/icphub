#!/usr/bin/env node

import { Actor, HttpAgent } from "@dfinity/agent";
import { Principal } from "@dfinity/principal";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Define the canister interface based on main.mo
interface ContextRegistryCanister {
  // Access Control
  initializeAccessControl: () => Promise<void>;
  getCallerUserRole: () => Promise<{ admin: null } | { user: null } | { guest: null }>;
  assignCallerUserRole: (user: Principal, role: { admin: null } | { user: null } | { guest: null }) => Promise<void>;
  isCallerAdmin: () => Promise<boolean>;

  // User Profiles
  getCallerUserProfile: () => Promise<[{ name: string }] | []>;
  getUserProfile: (user: Principal) => Promise<[{ name: string }] | []>;
  saveCallerUserProfile: (profile: { name: string }) => Promise<void>;

  // Season Management
  createSeason: (
    name: string,
    startTime: bigint,
    endTime: bigint,
    maxNames: bigint,
    minNameLength: bigint,
    maxNameLength: bigint,
    price: bigint
  ) => Promise<bigint>;
  activateSeason: (seasonId: bigint) => Promise<void>;
  endSeason: (seasonId: bigint) => Promise<void>;
  cancelSeason: (seasonId: bigint) => Promise<void>;
  getSeason: (seasonId: bigint) => Promise<{
    id: bigint;
    name: string;
    startTime: bigint;
    endTime: bigint;
    maxNames: bigint;
    minNameLength: bigint;
    maxNameLength: bigint;
    price: bigint;
    status: { draft: null } | { active: null } | { ended: null } | { cancelled: null };
    createdAt: bigint;
    updatedAt: bigint;
  }>;
  listSeasons: () => Promise<Array<any>>;
  getActiveSeason: () => Promise<any>;
  getActiveSeasonInfo: () => Promise<{
    season: any;
    availableNames: bigint;
    price: bigint;
  }>;

  // Name Registration
  registerName: (
    name: string,
    address: string,
    addressType: { canister: null } | { identity: null },
    owner: string,
    seasonId: bigint
  ) => Promise<void>;
  getNameRecord: (name: string) => Promise<{
    name: string;
    address: string;
    addressType: { canister: null } | { identity: null };
    owner: string;
    seasonId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  }>;
  listNameRecords: () => Promise<Array<any>>;
  hasRegisteredName: (owner: string) => Promise<boolean>;

  // File References
  registerFileReference: (path: string, hash: string) => Promise<void>;
  dropFileReference: (path: string) => Promise<void>;
  getFileReference: (path: string) => Promise<{ path: string; hash: string }>;
  listFileReferences: () => Promise<Array<{ path: string; hash: string }>>;

  // Metadata & Content
  saveMetadata: (name: string, title: string, description: string, image: string) => Promise<void>;
  getMetadata: (name: string) => Promise<{
    title: string;
    description: string;
    image: string;
    createdAt: bigint;
    updatedAt: bigint;
  }>;
  saveMarkdown: (name: string, content: string) => Promise<void>;
  getMarkdown: (name: string) => Promise<{
    content: string;
    updatedAt: bigint;
  }>;

  // Utility
  getCurrentTime: () => Promise<bigint>;
  getCanisterPrincipal: () => Promise<Principal>;
  getAdminPrincipal: () => Promise<[Principal] | []>;
  getAllAdmins: () => Promise<Principal[]>;
  getAdminCount: () => Promise<bigint>;

  // Financial
  getIcpBalance: () => Promise<bigint>;
  getCyclesBalance: () => Promise<bigint>;
}

class ContextRegistryManager {
  private actor?: ContextRegistryCanister;
  private agent?: HttpAgent;
  private canisterId?: string;

  async init(canisterId?: string, host?: string) {
    this.canisterId = canisterId || process.env.CANISTER_ID_CONTEXT_REGISTRY;

    if (!this.canisterId) {
      throw new Error("Canister ID not provided. Please set CANISTER_ID_CONTEXT_REGISTRY environment variable or pass it as parameter.");
    }

    const isLocal = host?.includes("localhost") || host?.includes("127.0.0.1");

    this.agent = new HttpAgent({
      host: host || "https://ic0.app",
    });

    // Fetch root key for local development
    if (isLocal) {
      await this.agent.fetchRootKey();
    }

    // Import the canister interface - this would be generated by dfx generate
    const { idlFactory } = await import("./declarations/context_registry");

    this.actor = Actor.createActor<ContextRegistryCanister>(idlFactory, {
      agent: this.agent,
      canisterId: this.canisterId,
    });
  }

  async initializeWithAdmin() {
    if (!this.actor) throw new Error("Actor not initialized");

    console.log("Initializing access control...");
    await this.actor.initializeAccessControl();

    const role = await this.actor.getCallerUserRole();
    console.log("Your role:", role);

    const isAdmin = await this.actor.isCallerAdmin();
    console.log("Is admin:", isAdmin);

    return isAdmin;
  }

  async createSeason(params: {
    name: string;
    startTime: Date;
    endTime: Date;
    maxNames: number;
    minNameLength: number;
    maxNameLength: number;
    price: number;
  }) {
    if (!this.actor) throw new Error("Actor not initialized");

    const seasonId = await this.actor.createSeason(
      params.name,
      BigInt(Math.floor(params.startTime.getTime() * 1000000)), // Convert to nanoseconds
      BigInt(Math.floor(params.endTime.getTime() * 1000000)),
      BigInt(params.maxNames),
      BigInt(params.minNameLength),
      BigInt(params.maxNameLength),
      BigInt(params.price)
    );

    console.log(`Season created with ID: ${seasonId}`);
    return seasonId;
  }

  async activateSeason(seasonId: bigint) {
    if (!this.actor) throw new Error("Actor not initialized");

    await this.actor.activateSeason(seasonId);
    console.log(`Season ${seasonId} activated`);
  }

  async listSeasons() {
    if (!this.actor) throw new Error("Actor not initialized");

    const seasons = await this.actor.listSeasons();
    console.log("Seasons:", seasons);
    return seasons;
  }

  async getCurrentTime() {
    if (!this.actor) throw new Error("Actor not initialized");

    const time = await this.actor.getCurrentTime();
    const date = new Date(Number(time) / 1000000); // Convert from nanoseconds
    console.log("Current IC time:", date.toISOString());
    return date;
  }

  getActor() {
    return this.actor;
  }
}

// CLI functionality
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  const manager = new ContextRegistryManager();

  try {
    // Initialize with environment-based setup
    const network = process.env.DFX_NETWORK || 'local';
    const host = network === 'ic' ? 'https://ic0.app' : 'http://localhost:4943';
    await manager.init(undefined, host);

    switch (command) {
      case "init":
        const isAdmin = await manager.initializeWithAdmin();
        if (isAdmin) {
          console.log("✅ Successfully initialized as admin!");
        } else {
          console.log("✅ Initialized as user");
        }
        break;

      case "create-season":
        if (args.length < 7) {
          console.error("Usage: npm run dev create-season <name> <maxNames> <minLength> <maxLength> <price> <durationDays>");
          process.exit(1);
        }

        const now = new Date();
        const endDate = new Date(now.getTime() + parseInt(args[6]) * 24 * 60 * 60 * 1000);

        const seasonId = await manager.createSeason({
          name: args[1],
          startTime: now,
          endTime: endDate,
          maxNames: parseInt(args[2]),
          minNameLength: parseInt(args[3]),
          maxNameLength: parseInt(args[4]),
          price: parseInt(args[5])
        });

        await manager.activateSeason(seasonId);
        break;

      case "list-seasons":
        await manager.listSeasons();
        break;

      case "time":
        await manager.getCurrentTime();
        break;

      case "status":
        console.log("Context Registry Manager Status:");
        await manager.getCurrentTime();
        await manager.listSeasons();
        break;

      default:
        console.log("Available commands:");
        console.log("  init                     - Initialize access control (first caller becomes admin)");
        console.log("  create-season <name> <maxNames> <minLength> <maxLength> <price> <durationDays>");
        console.log("  list-seasons            - List all seasons");
        console.log("  time                    - Get current IC time");
        console.log("  status                  - Show overall status");
        break;
    }
  } catch (error) {
    console.error("Error:", error);
    process.exit(1);
  }
}

// Export for use as library
export { ContextRegistryManager };

// Run as CLI if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}